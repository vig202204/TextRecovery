import logging
import os
from datetime import datetime

def setup_logging(console_level=logging.INFO, file_level=logging.DEBUG, log_to_file=True):
    """
    –ù–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ —Ç–∞ —Ñ–∞–π–ª—É
    
    Args:
        console_level: –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º INFO)
        file_level: –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ–∞–π–ª—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º DEBUG)
        log_to_file: –ß–∏ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –ª–æ–≥–∏ —É —Ñ–∞–π–ª
    """
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∏
    detailed_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    )
    
    simple_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –ª–æ–≥–µ—Ä –Ω–∞ –Ω–∞–π–Ω–∏–∂—á–∏–π —Ä—ñ–≤–µ–Ω—å (—â–æ–± —É—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∏)
    root_logger = logging.getLogger()
    root_logger.setLevel(min(console_level, file_level))
    
    # –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Console handler –∑ —Ä—ñ–≤–Ω–µ–º INFO
    console_handler = logging.StreamHandler()
    console_handler.setLevel(console_level)
    console_handler.setFormatter(simple_formatter)
    root_logger.addHandler(console_handler)
    
    # File handler –∑ —Ä—ñ–≤–Ω–µ–º DEBUG (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    if log_to_file:
        logs_dir = 'logs'
        if not os.path.exists(logs_dir):
            os.makedirs(logs_dir)
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ª–æ–≥—ñ–≤: {logs_dir}")
        
        log_filename = f'logs/text_recovery_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        file_handler = logging.FileHandler(log_filename)
        file_handler.setLevel(file_level)
        file_handler.setFormatter(detailed_formatter)
        root_logger.addHandler(file_handler)
        
        print(f"‚úÖ –§–∞–π–ª –ª–æ–≥—ñ–≤ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {log_filename}")
        print(f"üìä –ö–æ–Ω—Å–æ–ª—å: {logging.getLevelName(console_level)}, –§–∞–π–ª: {logging.getLevelName(file_level)}")
        
        # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        test_logger = logging.getLogger('setup_test')
        # test_logger.debug("üîç DEBUG: –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –∑'—è–≤–∏—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ —É —Ñ–∞–π–ª—ñ")
        # test_logger.info("‚ÑπÔ∏è INFO: –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑'—è–≤–∏—Ç—å—Å—è —ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ, —ñ —É —Ñ–∞–π–ª—ñ")
        # test_logger.warning("‚ö†Ô∏è WARNING: –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑'—è–≤–∏—Ç—å—Å—è —ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ, —ñ —É —Ñ–∞–π–ª—ñ")
    
    return root_logger